# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ProvenanceApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ProvenanceApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ProvenanceApi }) = "http://localhost"

const _returntypes_create_provenance_provenance_post_ProvenanceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("201", "x"=>".") * "\$") => CreateSoftwareExternalSoftwarePost201Response,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_provenance_provenance_post(_api::ProvenanceApi, provenance::Provenance; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_provenance_provenance_post_ProvenanceApi, "/provenance", [], provenance)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Provenance

Create provenance relationship

Params:
- provenance::Provenance (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_provenance_provenance_post(_api::ProvenanceApi, provenance::Provenance; _mediaType=nothing)
    _ctx = _oacinternal_create_provenance_provenance_post(_api, provenance; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_provenance_provenance_post(_api::ProvenanceApi, response_stream::Channel, provenance::Provenance; _mediaType=nothing)
    _ctx = _oacinternal_create_provenance_provenance_post(_api, provenance; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_hanging_nodes_provenance_hanging_nodes_delete_ProvenanceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
)

function _oacinternal_delete_hanging_nodes_provenance_hanging_nodes_delete(_api::ProvenanceApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_hanging_nodes_provenance_hanging_nodes_delete_ProvenanceApi, "/provenance/hanging_nodes", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Hanging Nodes

Prunes nodes that have 0 edges

Params:

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_hanging_nodes_provenance_hanging_nodes_delete(_api::ProvenanceApi; _mediaType=nothing)
    _ctx = _oacinternal_delete_hanging_nodes_provenance_hanging_nodes_delete(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_hanging_nodes_provenance_hanging_nodes_delete(_api::ProvenanceApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_delete_hanging_nodes_provenance_hanging_nodes_delete(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_provenance_provenance_id_delete_ProvenanceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("404", "x"=>".") * "\$") => String,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_delete_provenance_provenance_id_delete(_api::ProvenanceApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_provenance_provenance_id_delete_ProvenanceApi, "/provenance/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Provenance

Delete provenance metadata

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_provenance_provenance_id_delete(_api::ProvenanceApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_provenance_provenance_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_provenance_provenance_id_delete(_api::ProvenanceApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_provenance_provenance_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_provenance_provenance_get_ProvenanceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_provenance_provenance_get(_api::ProvenanceApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_provenance_provenance_get_ProvenanceApi, "/provenance", [])
    OpenAPI.Clients.set_param(_ctx.query, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Provenance

Searches for a provenance entry in TDS

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_provenance_provenance_get(_api::ProvenanceApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_provenance_provenance_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_provenance_provenance_get(_api::ProvenanceApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_provenance_provenance_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_provenance_provenance_search_post_ProvenanceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_search_provenance_provenance_search_post(_api::ProvenanceApi, provenance_payload::ProvenancePayload; search_type=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_provenance_provenance_search_post_ProvenanceApi, "/provenance/search", [], provenance_payload)
    OpenAPI.Clients.set_param(_ctx.query, "search_type", search_type)  # type ProvenanceSearchTypes
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search Provenance

Search provenance of for all artifacts that helped derive this artifact.  ## Types of searches:  **artifacts_created_by_user** - Return all artifacts created by a user. * Requirements: “user_id”  **model_to_primitive** - Return all models and the intermediates  they are derived from. * Requirements: None  **child_nodes** - Returns all child nodes of this artifact. (In other words artifacts created after this artifact  that were dependent/derived from the root artifact). * Requirements: “root_type”, “root_id”   **parent_nodes** - Return all parent nodes of this artifact. (Artifacts created before this artifact that help derive/create this root artifact). * Requirements: “root_type”, “root_id”  **connected_nodes** - Return all parent and child nodes  of this artifact. * Requirements: “root_type”, “root_id”   **derived_models** - Return all models that were derived     from a publication or intermediate. * Requirements: “root_type”, “root_id” * Allowed root _types are Publication and Intermediate   **parent_model_revisions** - Returns the model revisions that helped create the model that was used to create the root artifact. * Requirements: “root_type”, “root_id” * Allowed root _types are Model, Plan, SimulationRun, and Dataset   **parent_models** - Returns the models that helped create  the model that was used to create the root artifact. * Requirements: “root_type”, “root_id” * Allowed root _types are Model *will be expanded.  ## Payload format  The payload for searching needs to match the schema below.  Provenance Types are : Dataset, Model, ModelParameter, Plan, PlanParameter, ModelRevision, Intermediate, Publication, SimulationRun, Project, Concept.   ***edges*** set to true: edges will be returned if found  ***nodes*** set to true: nodes will not be returned if found  ***types*** filters node types you want returned.  ***hops*** limits the number of relationships away from the root node the search will traverse.  ***limit*** will limit the number of nodes returned for relationship and nodes.   The closest n number of nodes to the root node will be returned. There might   not be the exact the number of nodes returned as requested due to filtering   out node types.  ***versions*** set to true will return model revisions in edges. Versions set to  false will squash all model revisions to the  Model node they are associated with along with all the relationships connected  to model revisions      {         \"root_id\": 1,         \"root_type\": \"Publication\",         \"curie\": \"string\",         \"edges\": false,         \"nodes\": true,         \"types\": [             \"Dataset\",             \"Intermediate\",             \"Model\",             \"ModelParameter\",             \"Plan\",             \"PlanParameter\",             \"Publication\",             \"SimulationRun\"         ],         \"hops\": 15,         \"limit\": 1000,         \"versions\": false     }

Params:
- provenance_payload::ProvenancePayload (required)
- search_type::ProvenanceSearchTypes

Return: Any, OpenAPI.Clients.ApiResponse
"""
function search_provenance_provenance_search_post(_api::ProvenanceApi, provenance_payload::ProvenancePayload; search_type=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_provenance_provenance_search_post(_api, provenance_payload; search_type=search_type, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_provenance_provenance_search_post(_api::ProvenanceApi, response_stream::Channel, provenance_payload::ProvenancePayload; search_type=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_provenance_provenance_search_post(_api, provenance_payload; search_type=search_type, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_provenance_provenance_post
export delete_hanging_nodes_provenance_hanging_nodes_delete
export delete_provenance_provenance_id_delete
export get_provenance_provenance_get
export search_provenance_provenance_search_post
