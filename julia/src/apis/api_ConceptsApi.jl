# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ConceptsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ConceptsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ConceptsApi }) = "http://localhost"

const _returntypes_create_concept_concepts_post_ConceptsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_concept_concepts_post(_api::ConceptsApi, ontology_concept::OntologyConcept; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_concept_concepts_post_ConceptsApi, "/concepts", [], ontology_concept)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Concept

Create a concept

Params:
- ontology_concept::OntologyConcept (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_concept_concepts_post(_api::ConceptsApi, ontology_concept::OntologyConcept; _mediaType=nothing)
    _ctx = _oacinternal_create_concept_concepts_post(_api, ontology_concept; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_concept_concepts_post(_api::ConceptsApi, response_stream::Channel, ontology_concept::OntologyConcept; _mediaType=nothing)
    _ctx = _oacinternal_create_concept_concepts_post(_api, ontology_concept; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_concept_concepts_id_delete_ConceptsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_delete_concept_concepts_id_delete(_api::ConceptsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_concept_concepts_id_delete_ConceptsApi, "/concepts/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Concept

Delete a concept by ID

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_concept_concepts_id_delete(_api::ConceptsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_concept_concepts_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_concept_concepts_id_delete(_api::ConceptsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_concept_concepts_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_concept_concepts_id_get_ConceptsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_concept_concepts_id_get(_api::ConceptsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_concept_concepts_id_get_ConceptsApi, "/concepts/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Concept

Get a specific concept by ID

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_concept_concepts_id_get(_api::ConceptsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_concept_concepts_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_concept_concepts_id_get(_api::ConceptsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_concept_concepts_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_concept_definition_concepts_definitions_curie_get_ConceptsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_concept_definition_concepts_definitions_curie_get(_api::ConceptsApi, curie::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_concept_definition_concepts_definitions_curie_get_ConceptsApi, "/concepts/definitions/{curie}", [])
    OpenAPI.Clients.set_param(_ctx.path, "curie", curie)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Concept Definition

Wraps fetch functionality from the DKG.

Params:
- curie::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_concept_definition_concepts_definitions_curie_get(_api::ConceptsApi, curie::String; _mediaType=nothing)
    _ctx = _oacinternal_get_concept_definition_concepts_definitions_curie_get(_api, curie; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_concept_definition_concepts_definitions_curie_get(_api::ConceptsApi, response_stream::Channel, curie::String; _mediaType=nothing)
    _ctx = _oacinternal_get_concept_definition_concepts_definitions_curie_get(_api, curie; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_concept_concepts_get_ConceptsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_search_concept_concepts_get(_api::ConceptsApi, curie::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_concept_concepts_get_ConceptsApi, "/concepts", [])
    OpenAPI.Clients.set_param(_ctx.query, "curie", curie)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search Concept

Searches within TDS for artifacts with this concept term associated with them

Params:
- curie::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function search_concept_concepts_get(_api::ConceptsApi, curie::String; _mediaType=nothing)
    _ctx = _oacinternal_search_concept_concepts_get(_api, curie; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_concept_concepts_get(_api::ConceptsApi, response_stream::Channel, curie::String; _mediaType=nothing)
    _ctx = _oacinternal_search_concept_concepts_get(_api, curie; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_concept_definitions_concepts_definitions_get_ConceptsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_search_concept_definitions_concepts_definitions_get(_api::ConceptsApi, term::String; limit=nothing, offset=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_concept_definitions_concepts_definitions_get_ConceptsApi, "/concepts/definitions", [])
    OpenAPI.Clients.set_param(_ctx.query, "term", term)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "offset", offset)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search Concept Definitions

Wraps search functionality from the DKG.

Params:
- term::String (required)
- limit::Int64
- offset::Int64

Return: Any, OpenAPI.Clients.ApiResponse
"""
function search_concept_definitions_concepts_definitions_get(_api::ConceptsApi, term::String; limit=nothing, offset=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_concept_definitions_concepts_definitions_get(_api, term; limit=limit, offset=offset, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_concept_definitions_concepts_definitions_get(_api::ConceptsApi, response_stream::Channel, term::String; limit=nothing, offset=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_concept_definitions_concepts_definitions_get(_api, term; limit=limit, offset=offset, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_concept_using_facets_concepts_facets_get_ConceptsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_search_concept_using_facets_concepts_facets_get(_api::ConceptsApi; types=nothing, curies=nothing, is_simulation=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_concept_using_facets_concepts_facets_get_ConceptsApi, "/concepts/facets", [])
    OpenAPI.Clients.set_param(_ctx.query, "types", types)  # type Vector{TaggableType}
    OpenAPI.Clients.set_param(_ctx.query, "curies", curies)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "is_simulation", is_simulation)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Search Concept Using Facets

Search along type and curie facets

Params:
- types::Vector{TaggableType}
- curies::Vector{String}
- is_simulation::Bool

Return: Any, OpenAPI.Clients.ApiResponse
"""
function search_concept_using_facets_concepts_facets_get(_api::ConceptsApi; types=nothing, curies=nothing, is_simulation=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_concept_using_facets_concepts_facets_get(_api; types=types, curies=curies, is_simulation=is_simulation, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_concept_using_facets_concepts_facets_get(_api::ConceptsApi, response_stream::Channel; types=nothing, curies=nothing, is_simulation=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_concept_using_facets_concepts_facets_get(_api; types=types, curies=curies, is_simulation=is_simulation, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_concept_concepts_id_patch_ConceptsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_update_concept_concepts_id_patch(_api::ConceptsApi, id::Int64, ontology_concept::OntologyConcept; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_concept_concepts_id_patch_ConceptsApi, "/concepts/{id}", [], ontology_concept)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Concept

Update a concept by ID

Params:
- id::Int64 (required)
- ontology_concept::OntologyConcept (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function update_concept_concepts_id_patch(_api::ConceptsApi, id::Int64, ontology_concept::OntologyConcept; _mediaType=nothing)
    _ctx = _oacinternal_update_concept_concepts_id_patch(_api, id, ontology_concept; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_concept_concepts_id_patch(_api::ConceptsApi, response_stream::Channel, id::Int64, ontology_concept::OntologyConcept; _mediaType=nothing)
    _ctx = _oacinternal_update_concept_concepts_id_patch(_api, id, ontology_concept; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_concept_concepts_post
export delete_concept_concepts_id_delete
export get_concept_concepts_id_get
export get_concept_definition_concepts_definitions_curie_get
export search_concept_concepts_get
export search_concept_definitions_concepts_definitions_get
export search_concept_using_facets_concepts_facets_get
export update_concept_concepts_id_patch
