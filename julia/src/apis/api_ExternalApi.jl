# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ExternalApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ExternalApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ExternalApi }) = "http://localhost"

const _returntypes_create_publication_external_publications_post_ExternalApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("201", "x"=>".") * "\$") => CreateFeatureDatasetsFeaturesPost201Response,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_publication_external_publications_post(_api::ExternalApi, publication::Publication; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_publication_external_publications_post_ExternalApi, "/external/publications", [], publication)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Publication

Create publication and return its ID

Params:
- publication::Publication (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_publication_external_publications_post(_api::ExternalApi, publication::Publication; _mediaType=nothing)
    _ctx = _oacinternal_create_publication_external_publications_post(_api, publication; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_publication_external_publications_post(_api::ExternalApi, response_stream::Channel, publication::Publication; _mediaType=nothing)
    _ctx = _oacinternal_create_publication_external_publications_post(_api, publication; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_software_external_software_post_ExternalApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("201", "x"=>".") * "\$") => CreateFeatureDatasetsFeaturesPost201Response,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_software_external_software_post(_api::ExternalApi, software::Software; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_software_external_software_post_ExternalApi, "/external/software", [], software)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Software

Create software metadata

Params:
- software::Software (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_software_external_software_post(_api::ExternalApi, software::Software; _mediaType=nothing)
    _ctx = _oacinternal_create_software_external_software_post(_api, software; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_software_external_software_post(_api::ExternalApi, response_stream::Channel, software::Software; _mediaType=nothing)
    _ctx = _oacinternal_create_software_external_software_post(_api, software; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_publication_external_publications_id_delete_ExternalApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("404", "x"=>".") * "\$") => String,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_delete_publication_external_publications_id_delete(_api::ExternalApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_publication_external_publications_id_delete_ExternalApi, "/external/publications/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Publication

Delete publications metadata

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_publication_external_publications_id_delete(_api::ExternalApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_publication_external_publications_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_publication_external_publications_id_delete(_api::ExternalApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_publication_external_publications_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_software_external_software_id_delete_ExternalApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("404", "x"=>".") * "\$") => String,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_delete_software_external_software_id_delete(_api::ExternalApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_software_external_software_id_delete_ExternalApi, "/external/software/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Software

Delete software metadata

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_software_external_software_id_delete(_api::ExternalApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_software_external_software_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_software_external_software_id_delete(_api::ExternalApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_software_external_software_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_publication_external_publications_id_get_ExternalApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_publication_external_publications_id_get(_api::ExternalApi, id::Id; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_publication_external_publications_id_get_ExternalApi, "/external/publications/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Id
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Publication

Retrieve model

Params:
- id::Id (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_publication_external_publications_id_get(_api::ExternalApi, id::Id; _mediaType=nothing)
    _ctx = _oacinternal_get_publication_external_publications_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_publication_external_publications_id_get(_api::ExternalApi, response_stream::Channel, id::Id; _mediaType=nothing)
    _ctx = _oacinternal_get_publication_external_publications_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_software_external_software_id_get_ExternalApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_software_external_software_id_get(_api::ExternalApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_software_external_software_id_get_ExternalApi, "/external/software/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Software

Retrieve software metadata

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_software_external_software_id_get(_api::ExternalApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_software_external_software_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_software_external_software_id_get(_api::ExternalApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_software_external_software_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_publication_external_publications_post
export create_software_external_software_post
export delete_publication_external_publications_id_delete
export delete_software_external_software_id_delete
export get_publication_external_publications_id_get
export get_software_external_software_id_get
