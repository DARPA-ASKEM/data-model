# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PersonsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PersonsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PersonsApi }) = "http://localhost"

const _returntypes_create_association_persons_associations_post_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_association_persons_associations_post(_api::PersonsApi, association::Association; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_association_persons_associations_post_PersonsApi, "/persons/associations", [], association)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Association

Create a association

Params:
- association::Association (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_association_persons_associations_post(_api::PersonsApi, association::Association; _mediaType=nothing)
    _ctx = _oacinternal_create_association_persons_associations_post(_api, association; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_association_persons_associations_post(_api::PersonsApi, response_stream::Channel, association::Association; _mediaType=nothing)
    _ctx = _oacinternal_create_association_persons_associations_post(_api, association; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_person_persons_post_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_person_persons_post(_api::PersonsApi, person::Person; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_person_persons_post_PersonsApi, "/persons", [], person)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Person

Create a person

Params:
- person::Person (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_person_persons_post(_api::PersonsApi, person::Person; _mediaType=nothing)
    _ctx = _oacinternal_create_person_persons_post(_api, person; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_person_persons_post(_api::PersonsApi, response_stream::Channel, person::Person; _mediaType=nothing)
    _ctx = _oacinternal_create_person_persons_post(_api, person; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_association_persons_associations_id_delete_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_delete_association_persons_associations_id_delete(_api::PersonsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_association_persons_associations_id_delete_PersonsApi, "/persons/associations/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Association

Delete a association by ID

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_association_persons_associations_id_delete(_api::PersonsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_association_persons_associations_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_association_persons_associations_id_delete(_api::PersonsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_association_persons_associations_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_person_persons_id_delete_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_delete_person_persons_id_delete(_api::PersonsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_person_persons_id_delete_PersonsApi, "/persons/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Person

Delete a person by ID

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_person_persons_id_delete(_api::PersonsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_person_persons_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_person_persons_id_delete(_api::PersonsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_person_persons_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_association_persons_associations_id_get_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_association_persons_associations_id_get(_api::PersonsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_association_persons_associations_id_get_PersonsApi, "/persons/associations/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Association

Get a specific association by ID

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_association_persons_associations_id_get(_api::PersonsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_association_persons_associations_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_association_persons_associations_id_get(_api::PersonsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_association_persons_associations_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_person_persons_id_get_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_person_persons_id_get(_api::PersonsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_person_persons_id_get_PersonsApi, "/persons/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Person

Get a specific person by ID

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_person_persons_id_get(_api::PersonsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_person_persons_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_person_persons_id_get(_api::PersonsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_person_persons_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_persons_persons_get_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_persons_persons_get(_api::PersonsApi; page_size=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_persons_persons_get_PersonsApi, "/persons", [])
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Persons

Page over persons

Params:
- page_size::Int64
- page::Int64

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_persons_persons_get(_api::PersonsApi; page_size=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_persons_persons_get(_api; page_size=page_size, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_persons_persons_get(_api::PersonsApi, response_stream::Channel; page_size=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_persons_persons_get(_api; page_size=page_size, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_association_persons_associations_id_patch_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_update_association_persons_associations_id_patch(_api::PersonsApi, id::Int64, association::Association; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_association_persons_associations_id_patch_PersonsApi, "/persons/associations/{id}", [], association)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Association

Update a association by ID

Params:
- id::Int64 (required)
- association::Association (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function update_association_persons_associations_id_patch(_api::PersonsApi, id::Int64, association::Association; _mediaType=nothing)
    _ctx = _oacinternal_update_association_persons_associations_id_patch(_api, id, association; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_association_persons_associations_id_patch(_api::PersonsApi, response_stream::Channel, id::Int64, association::Association; _mediaType=nothing)
    _ctx = _oacinternal_update_association_persons_associations_id_patch(_api, id, association; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_person_persons_id_patch_PersonsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_update_person_persons_id_patch(_api::PersonsApi, id::Int64, person::Person; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_person_persons_id_patch_PersonsApi, "/persons/{id}", [], person)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Person

Update a person by ID

Params:
- id::Int64 (required)
- person::Person (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function update_person_persons_id_patch(_api::PersonsApi, id::Int64, person::Person; _mediaType=nothing)
    _ctx = _oacinternal_update_person_persons_id_patch(_api, id, person; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_person_persons_id_patch(_api::PersonsApi, response_stream::Channel, id::Int64, person::Person; _mediaType=nothing)
    _ctx = _oacinternal_update_person_persons_id_patch(_api, id, person; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_association_persons_associations_post
export create_person_persons_post
export delete_association_persons_associations_id_delete
export delete_person_persons_id_delete
export get_association_persons_associations_id_get
export get_person_persons_id_get
export get_persons_persons_get
export update_association_persons_associations_id_patch
export update_person_persons_id_patch
