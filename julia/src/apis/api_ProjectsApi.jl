# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ProjectsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ProjectsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ProjectsApi }) = "http://localhost"

const _returntypes_create_asset_projects_project_id_assets_resource_type_resource_id_post_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("201", "x"=>".") * "\$") => CreateFeatureDatasetsFeaturesPost201Response,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_asset_projects_project_id_assets_resource_type_resource_id_post(_api::ProjectsApi, project_id::Int64, resource_type::ResourceType, resource_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_asset_projects_project_id_assets_resource_type_resource_id_post_ProjectsApi, "/projects/{project_id}/assets/{resource_type}/{resource_id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "project_id", project_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "resource_type", resource_type)  # type ResourceType
    OpenAPI.Clients.set_param(_ctx.path, "resource_id", resource_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create Asset

Create asset and return its ID

Params:
- project_id::Int64 (required)
- resource_type::ResourceType (required)
- resource_id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_asset_projects_project_id_assets_resource_type_resource_id_post(_api::ProjectsApi, project_id::Int64, resource_type::ResourceType, resource_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_create_asset_projects_project_id_assets_resource_type_resource_id_post(_api, project_id, resource_type, resource_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_asset_projects_project_id_assets_resource_type_resource_id_post(_api::ProjectsApi, response_stream::Channel, project_id::Int64, resource_type::ResourceType, resource_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_create_asset_projects_project_id_assets_resource_type_resource_id_post(_api, project_id, resource_type, resource_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_project_projects_post_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("201", "x"=>".") * "\$") => CreateFeatureDatasetsFeaturesPost201Response,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_create_project_projects_post(_api::ProjectsApi, project::Project; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_project_projects_post_ProjectsApi, "/projects", [], project)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Project

Create project and return its ID

Params:
- project::Project (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function create_project_projects_post(_api::ProjectsApi, project::Project; _mediaType=nothing)
    _ctx = _oacinternal_create_project_projects_post(_api, project; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_project_projects_post(_api::ProjectsApi, response_stream::Channel, project::Project; _mediaType=nothing)
    _ctx = _oacinternal_create_project_projects_post(_api, project; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deactivate_project_projects_id_delete_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_deactivate_project_projects_id_delete(_api::ProjectsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_deactivate_project_projects_id_delete_ProjectsApi, "/projects/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deactivate Project

Deactivate project

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function deactivate_project_projects_id_delete(_api::ProjectsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_deactivate_project_projects_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deactivate_project_projects_id_delete(_api::ProjectsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_deactivate_project_projects_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_asset_projects_project_id_assets_resource_type_resource_id_delete_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("404", "x"=>".") * "\$") => String,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_delete_asset_projects_project_id_assets_resource_type_resource_id_delete(_api::ProjectsApi, project_id::Int64, resource_type::ResourceType, resource_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_asset_projects_project_id_assets_resource_type_resource_id_delete_ProjectsApi, "/projects/{project_id}/assets/{resource_type}/{resource_id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "project_id", project_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "resource_type", resource_type)  # type ResourceType
    OpenAPI.Clients.set_param(_ctx.path, "resource_id", resource_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Asset

Remove asset

Params:
- project_id::Int64 (required)
- resource_type::ResourceType (required)
- resource_id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_asset_projects_project_id_assets_resource_type_resource_id_delete(_api::ProjectsApi, project_id::Int64, resource_type::ResourceType, resource_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_asset_projects_project_id_assets_resource_type_resource_id_delete(_api, project_id, resource_type, resource_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_asset_projects_project_id_assets_resource_type_resource_id_delete(_api::ProjectsApi, response_stream::Channel, project_id::Int64, resource_type::ResourceType, resource_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_asset_projects_project_id_assets_resource_type_resource_id_delete(_api, project_id, resource_type, resource_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_project_assets_projects_id_assets_get_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_project_assets_projects_id_assets_get(_api::ProjectsApi, id::Int64; types=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_project_assets_projects_id_assets_get_ProjectsApi, "/projects/{id}/assets", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "types", types)  # type Vector{ResourceType}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Project Assets

Retrieve project assets

Params:
- id::Int64 (required)
- types::Vector{ResourceType}

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_project_assets_projects_id_assets_get(_api::ProjectsApi, id::Int64; types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_project_assets_projects_id_assets_get(_api, id; types=types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_project_assets_projects_id_assets_get(_api::ProjectsApi, response_stream::Channel, id::Int64; types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_project_assets_projects_id_assets_get(_api, id; types=types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_project_projects_id_get_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_get_project_projects_id_get(_api::ProjectsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_project_projects_id_get_ProjectsApi, "/projects/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Project

Retrieve project

Params:
- id::Int64 (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_project_projects_id_get(_api::ProjectsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_project_projects_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_project_projects_id_get(_api::ProjectsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_project_projects_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_projects_projects_get_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_list_projects_projects_get(_api::ProjectsApi; page_size=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_projects_projects_get_ProjectsApi, "/projects", [])
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Projects

Retrieve all projects

Params:
- page_size::Int64
- page::Int64

Return: Any, OpenAPI.Clients.ApiResponse
"""
function list_projects_projects_get(_api::ProjectsApi; page_size=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_projects_projects_get(_api; page_size=page_size, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_projects_projects_get(_api::ProjectsApi, response_stream::Channel; page_size=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_projects_projects_get(_api; page_size=page_size, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_project_projects_id_put_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("422", "x"=>".") * "\$") => HTTPValidationError,
)

function _oacinternal_update_project_projects_id_put(_api::ProjectsApi, id::Int64, project::Project; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_project_projects_id_put_ProjectsApi, "/projects/{id}", [], project)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update Project

Update project

Params:
- id::Int64 (required)
- project::Project (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function update_project_projects_id_put(_api::ProjectsApi, id::Int64, project::Project; _mediaType=nothing)
    _ctx = _oacinternal_update_project_projects_id_put(_api, id, project; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_project_projects_id_put(_api::ProjectsApi, response_stream::Channel, id::Int64, project::Project; _mediaType=nothing)
    _ctx = _oacinternal_update_project_projects_id_put(_api, id, project; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_asset_projects_project_id_assets_resource_type_resource_id_post
export create_project_projects_post
export deactivate_project_projects_id_delete
export delete_asset_projects_project_id_assets_resource_type_resource_id_delete
export get_project_assets_projects_id_assets_get
export get_project_projects_id_get
export list_projects_projects_get
export update_project_projects_id_put
