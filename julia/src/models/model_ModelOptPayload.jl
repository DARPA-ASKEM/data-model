# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelOptPayload

    ModelOptPayload(;
        id=nothing,
        name=nothing,
        description=nothing,
        framework=nothing,
        timestamp=nothing,
        state_id=nothing,
        left=nothing,
        right=nothing,
        content=nothing,
        parameters=nothing,
    )

    - id::Int64
    - name::String
    - description::String
    - framework::String
    - timestamp::ZonedDateTime
    - state_id::Int64
    - left::Int64
    - right::Int64
    - content::ModelContent
    - parameters::Vector{Any}
"""
Base.@kwdef mutable struct ModelOptPayload <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    framework::Union{Nothing, String} = nothing
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    state_id::Union{Nothing, Int64} = nothing
    left::Union{Nothing, Int64} = nothing
    right::Union{Nothing, Int64} = nothing
    content = nothing # spec type: Union{ Nothing, ModelContent }
    parameters::Union{Nothing, Vector{Any}} = nothing

    function ModelOptPayload(id, name, description, framework, timestamp, state_id, left, right, content, parameters, )
        OpenAPI.validate_property(ModelOptPayload, Symbol("id"), id)
        OpenAPI.validate_property(ModelOptPayload, Symbol("name"), name)
        OpenAPI.validate_property(ModelOptPayload, Symbol("description"), description)
        OpenAPI.validate_property(ModelOptPayload, Symbol("framework"), framework)
        OpenAPI.validate_property(ModelOptPayload, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(ModelOptPayload, Symbol("state_id"), state_id)
        OpenAPI.validate_property(ModelOptPayload, Symbol("left"), left)
        OpenAPI.validate_property(ModelOptPayload, Symbol("right"), right)
        OpenAPI.validate_property(ModelOptPayload, Symbol("content"), content)
        OpenAPI.validate_property(ModelOptPayload, Symbol("parameters"), parameters)
        return new(id, name, description, framework, timestamp, state_id, left, right, content, parameters, )
    end
end # type ModelOptPayload

const _property_types_ModelOptPayload = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("framework")=>"String", Symbol("timestamp")=>"ZonedDateTime", Symbol("state_id")=>"Int64", Symbol("left")=>"Int64", Symbol("right")=>"Int64", Symbol("content")=>"ModelContent", Symbol("parameters")=>"Vector{Any}", )
OpenAPI.property_type(::Type{ ModelOptPayload }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelOptPayload[name]))}

function check_required(o::ModelOptPayload)
    o.name === nothing && (return false)
    o.framework === nothing && (return false)
    o.left === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ModelOptPayload }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "ModelOptPayload", :format, val, "date-time")
    end
end
