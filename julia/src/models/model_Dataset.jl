# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Dataset

    Dataset(;
        id=nothing,
        name=nothing,
        url=nothing,
        description=nothing,
        timestamp=nothing,
        deprecated=false,
        sensitivity=nothing,
        quality=nothing,
        temporal_resolution=nothing,
        geospatial_resolution=nothing,
        annotations=nothing,
        maintainer=nothing,
        simulation_run=false,
    )

    - id::Int64
    - name::String
    - url::String
    - description::String
    - timestamp::ZonedDateTime
    - deprecated::Bool
    - sensitivity::String
    - quality::String
    - temporal_resolution::String
    - geospatial_resolution::String
    - annotations::String
    - maintainer::Int64
    - simulation_run::Bool
"""
Base.@kwdef mutable struct Dataset <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    deprecated::Union{Nothing, Bool} = false
    sensitivity::Union{Nothing, String} = nothing
    quality::Union{Nothing, String} = nothing
    temporal_resolution::Union{Nothing, String} = nothing
    geospatial_resolution::Union{Nothing, String} = nothing
    annotations::Union{Nothing, String} = nothing
    maintainer::Union{Nothing, Int64} = nothing
    simulation_run::Union{Nothing, Bool} = false

    function Dataset(id, name, url, description, timestamp, deprecated, sensitivity, quality, temporal_resolution, geospatial_resolution, annotations, maintainer, simulation_run, )
        OpenAPI.validate_property(Dataset, Symbol("id"), id)
        OpenAPI.validate_property(Dataset, Symbol("name"), name)
        OpenAPI.validate_property(Dataset, Symbol("url"), url)
        OpenAPI.validate_property(Dataset, Symbol("description"), description)
        OpenAPI.validate_property(Dataset, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(Dataset, Symbol("deprecated"), deprecated)
        OpenAPI.validate_property(Dataset, Symbol("sensitivity"), sensitivity)
        OpenAPI.validate_property(Dataset, Symbol("quality"), quality)
        OpenAPI.validate_property(Dataset, Symbol("temporal_resolution"), temporal_resolution)
        OpenAPI.validate_property(Dataset, Symbol("geospatial_resolution"), geospatial_resolution)
        OpenAPI.validate_property(Dataset, Symbol("annotations"), annotations)
        OpenAPI.validate_property(Dataset, Symbol("maintainer"), maintainer)
        OpenAPI.validate_property(Dataset, Symbol("simulation_run"), simulation_run)
        return new(id, name, url, description, timestamp, deprecated, sensitivity, quality, temporal_resolution, geospatial_resolution, annotations, maintainer, simulation_run, )
    end
end # type Dataset

const _property_types_Dataset = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("url")=>"String", Symbol("description")=>"String", Symbol("timestamp")=>"ZonedDateTime", Symbol("deprecated")=>"Bool", Symbol("sensitivity")=>"String", Symbol("quality")=>"String", Symbol("temporal_resolution")=>"String", Symbol("geospatial_resolution")=>"String", Symbol("annotations")=>"String", Symbol("maintainer")=>"Int64", Symbol("simulation_run")=>"Bool", )
OpenAPI.property_type(::Type{ Dataset }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Dataset[name]))}

function check_required(o::Dataset)
    o.name === nothing && (return false)
    o.url === nothing && (return false)
    o.description === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Dataset }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "Dataset", :format, val, "date-time")
    end
    if name === Symbol("annotations")
        OpenAPI.validate_param(name, "Dataset", :format, val, "json-string")
    end
end
