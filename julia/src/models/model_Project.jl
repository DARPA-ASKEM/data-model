# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Project

    Project(;
        id=nothing,
        name=nothing,
        description=nothing,
        timestamp=nothing,
        active=true,
        username=nothing,
        concept=nothing,
        assets=nothing,
    )

    - id::Int64
    - name::String
    - description::String
    - timestamp::ZonedDateTime
    - active::Bool
    - username::String
    - concept::Concept
    - assets::Dict{String, Vector{Int64}}
"""
Base.@kwdef mutable struct Project <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    active::Union{Nothing, Bool} = true
    username::Union{Nothing, String} = nothing
    concept = nothing # spec type: Union{ Nothing, Concept }
    assets::Union{Nothing, Dict{String, Vector{Int64}}} = nothing

    function Project(id, name, description, timestamp, active, username, concept, assets, )
        OpenAPI.validate_property(Project, Symbol("id"), id)
        OpenAPI.validate_property(Project, Symbol("name"), name)
        OpenAPI.validate_property(Project, Symbol("description"), description)
        OpenAPI.validate_property(Project, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(Project, Symbol("active"), active)
        OpenAPI.validate_property(Project, Symbol("username"), username)
        OpenAPI.validate_property(Project, Symbol("concept"), concept)
        OpenAPI.validate_property(Project, Symbol("assets"), assets)
        return new(id, name, description, timestamp, active, username, concept, assets, )
    end
end # type Project

const _property_types_Project = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("timestamp")=>"ZonedDateTime", Symbol("active")=>"Bool", Symbol("username")=>"String", Symbol("concept")=>"Concept", Symbol("assets")=>"Dict{String, Vector{Int64}}", )
OpenAPI.property_type(::Type{ Project }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Project[name]))}

function check_required(o::Project)
    o.name === nothing && (return false)
    o.description === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Project }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "Project", :format, val, "date-time")
    end
end
