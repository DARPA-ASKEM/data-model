# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Provenance

    Provenance(;
        id=nothing,
        timestamp=nothing,
        relation_type=nothing,
        left=nothing,
        left_type=nothing,
        right=nothing,
        right_type=nothing,
        user_id=nothing,
        concept=nothing,
    )

    - id::Int64
    - timestamp::ZonedDateTime
    - relation_type::RelationType
    - left::Int64
    - left_type::ProvenanceType
    - right::Int64
    - right_type::ProvenanceType
    - user_id::Int64
    - concept::String
"""
Base.@kwdef mutable struct Provenance <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    relation_type = nothing # spec type: Union{ Nothing, RelationType }
    left::Union{Nothing, Int64} = nothing
    left_type = nothing # spec type: Union{ Nothing, ProvenanceType }
    right::Union{Nothing, Int64} = nothing
    right_type = nothing # spec type: Union{ Nothing, ProvenanceType }
    user_id::Union{Nothing, Int64} = nothing
    concept::Union{Nothing, String} = nothing

    function Provenance(id, timestamp, relation_type, left, left_type, right, right_type, user_id, concept, )
        OpenAPI.validate_property(Provenance, Symbol("id"), id)
        OpenAPI.validate_property(Provenance, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(Provenance, Symbol("relation_type"), relation_type)
        OpenAPI.validate_property(Provenance, Symbol("left"), left)
        OpenAPI.validate_property(Provenance, Symbol("left_type"), left_type)
        OpenAPI.validate_property(Provenance, Symbol("right"), right)
        OpenAPI.validate_property(Provenance, Symbol("right_type"), right_type)
        OpenAPI.validate_property(Provenance, Symbol("user_id"), user_id)
        OpenAPI.validate_property(Provenance, Symbol("concept"), concept)
        return new(id, timestamp, relation_type, left, left_type, right, right_type, user_id, concept, )
    end
end # type Provenance

const _property_types_Provenance = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("timestamp")=>"ZonedDateTime", Symbol("relation_type")=>"RelationType", Symbol("left")=>"Int64", Symbol("left_type")=>"ProvenanceType", Symbol("right")=>"Int64", Symbol("right_type")=>"ProvenanceType", Symbol("user_id")=>"Int64", Symbol("concept")=>"String", )
OpenAPI.property_type(::Type{ Provenance }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Provenance[name]))}

function check_required(o::Provenance)
    o.relation_type === nothing && (return false)
    o.left === nothing && (return false)
    o.left_type === nothing && (return false)
    o.right === nothing && (return false)
    o.right_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Provenance }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "Provenance", :format, val, "date-time")
    end
end
