# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Intermediate

    Intermediate(;
        id=nothing,
        timestamp=nothing,
        source=nothing,
        type=nothing,
        content=nothing,
    )

    - id::Int64
    - timestamp::ZonedDateTime
    - source::IntermediateSource
    - type::IntermediateFormat
    - content::String
"""
Base.@kwdef mutable struct Intermediate <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    source = nothing # spec type: Union{ Nothing, IntermediateSource }
    type = nothing # spec type: Union{ Nothing, IntermediateFormat }
    content::Union{Nothing, String} = nothing

    function Intermediate(id, timestamp, source, type, content, )
        OpenAPI.validate_property(Intermediate, Symbol("id"), id)
        OpenAPI.validate_property(Intermediate, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(Intermediate, Symbol("source"), source)
        OpenAPI.validate_property(Intermediate, Symbol("type"), type)
        OpenAPI.validate_property(Intermediate, Symbol("content"), content)
        return new(id, timestamp, source, type, content, )
    end
end # type Intermediate

const _property_types_Intermediate = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("timestamp")=>"ZonedDateTime", Symbol("source")=>"IntermediateSource", Symbol("type")=>"IntermediateFormat", Symbol("content")=>"String", )
OpenAPI.property_type(::Type{ Intermediate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Intermediate[name]))}

function check_required(o::Intermediate)
    o.source === nothing && (return false)
    o.type === nothing && (return false)
    o.content === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Intermediate }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "Intermediate", :format, val, "date-time")
    end
    if name === Symbol("content")
        OpenAPI.validate_param(name, "Intermediate", :format, val, "binary")
    end
end
