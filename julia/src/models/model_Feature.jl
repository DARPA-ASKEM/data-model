# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Feature

    Feature(;
        id=nothing,
        dataset_id=nothing,
        description=nothing,
        display_name=nothing,
        name=nothing,
        value_type=nothing,
    )

    - id::Int64
    - dataset_id::Int64
    - description::String
    - display_name::String
    - name::String
    - value_type::ValueType
"""
Base.@kwdef mutable struct Feature <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    dataset_id::Union{Nothing, Int64} = nothing
    description::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    value_type = nothing # spec type: Union{ Nothing, ValueType }

    function Feature(id, dataset_id, description, display_name, name, value_type, )
        OpenAPI.validate_property(Feature, Symbol("id"), id)
        OpenAPI.validate_property(Feature, Symbol("dataset_id"), dataset_id)
        OpenAPI.validate_property(Feature, Symbol("description"), description)
        OpenAPI.validate_property(Feature, Symbol("display_name"), display_name)
        OpenAPI.validate_property(Feature, Symbol("name"), name)
        OpenAPI.validate_property(Feature, Symbol("value_type"), value_type)
        return new(id, dataset_id, description, display_name, name, value_type, )
    end
end # type Feature

const _property_types_Feature = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("dataset_id")=>"Int64", Symbol("description")=>"String", Symbol("display_name")=>"String", Symbol("name")=>"String", Symbol("value_type")=>"ValueType", )
OpenAPI.property_type(::Type{ Feature }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Feature[name]))}

function check_required(o::Feature)
    o.name === nothing && (return false)
    o.value_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Feature }, name::Symbol, val)
end
