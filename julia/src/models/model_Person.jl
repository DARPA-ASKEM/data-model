# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Person

    Person(;
        id=nothing,
        name=nothing,
        email=nothing,
        org=nothing,
        website=nothing,
        is_registered=nothing,
    )

    - id::Int64
    - name::String
    - email::String
    - org::String
    - website::String
    - is_registered::Bool
"""
Base.@kwdef mutable struct Person <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    email::Union{Nothing, String} = nothing
    org::Union{Nothing, String} = nothing
    website::Union{Nothing, String} = nothing
    is_registered::Union{Nothing, Bool} = nothing

    function Person(id, name, email, org, website, is_registered, )
        OpenAPI.validate_property(Person, Symbol("id"), id)
        OpenAPI.validate_property(Person, Symbol("name"), name)
        OpenAPI.validate_property(Person, Symbol("email"), email)
        OpenAPI.validate_property(Person, Symbol("org"), org)
        OpenAPI.validate_property(Person, Symbol("website"), website)
        OpenAPI.validate_property(Person, Symbol("is_registered"), is_registered)
        return new(id, name, email, org, website, is_registered, )
    end
end # type Person

const _property_types_Person = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("email")=>"String", Symbol("org")=>"String", Symbol("website")=>"String", Symbol("is_registered")=>"Bool", )
OpenAPI.property_type(::Type{ Person }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Person[name]))}

function check_required(o::Person)
    o.name === nothing && (return false)
    o.email === nothing && (return false)
    o.is_registered === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Person }, name::Symbol, val)
end
