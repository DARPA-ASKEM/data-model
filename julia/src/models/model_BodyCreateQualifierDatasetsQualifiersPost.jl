# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Body_create_qualifier_datasets_qualifiers_post

    BodyCreateQualifierDatasetsQualifiersPost(;
        payload=nothing,
        qualifies_array=nothing,
    )

    - payload::Qualifier
    - qualifies_array::Vector{String}
"""
Base.@kwdef mutable struct BodyCreateQualifierDatasetsQualifiersPost <: OpenAPI.APIModel
    payload = nothing # spec type: Union{ Nothing, Qualifier }
    qualifies_array::Union{Nothing, Vector{String}} = nothing

    function BodyCreateQualifierDatasetsQualifiersPost(payload, qualifies_array, )
        OpenAPI.validate_property(BodyCreateQualifierDatasetsQualifiersPost, Symbol("payload"), payload)
        OpenAPI.validate_property(BodyCreateQualifierDatasetsQualifiersPost, Symbol("qualifies_array"), qualifies_array)
        return new(payload, qualifies_array, )
    end
end # type BodyCreateQualifierDatasetsQualifiersPost

const _property_types_BodyCreateQualifierDatasetsQualifiersPost = Dict{Symbol,String}(Symbol("payload")=>"Qualifier", Symbol("qualifies_array")=>"Vector{String}", )
OpenAPI.property_type(::Type{ BodyCreateQualifierDatasetsQualifiersPost }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BodyCreateQualifierDatasetsQualifiersPost[name]))}

function check_required(o::BodyCreateQualifierDatasetsQualifiersPost)
    o.payload === nothing && (return false)
    o.qualifies_array === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BodyCreateQualifierDatasetsQualifiersPost }, name::Symbol, val)
end
