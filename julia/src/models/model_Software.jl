# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Software

    Software(;
        id=nothing,
        timestamp=nothing,
        source=nothing,
        storage_uri=nothing,
    )

    - id::Int64
    - timestamp::ZonedDateTime
    - source::String
    - storage_uri::String
"""
Base.@kwdef mutable struct Software <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    source::Union{Nothing, String} = nothing
    storage_uri::Union{Nothing, String} = nothing

    function Software(id, timestamp, source, storage_uri, )
        OpenAPI.validate_property(Software, Symbol("id"), id)
        OpenAPI.validate_property(Software, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(Software, Symbol("source"), source)
        OpenAPI.validate_property(Software, Symbol("storage_uri"), storage_uri)
        return new(id, timestamp, source, storage_uri, )
    end
end # type Software

const _property_types_Software = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("timestamp")=>"ZonedDateTime", Symbol("source")=>"String", Symbol("storage_uri")=>"String", )
OpenAPI.property_type(::Type{ Software }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Software[name]))}

function check_required(o::Software)
    o.source === nothing && (return false)
    o.storage_uri === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Software }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "Software", :format, val, "date-time")
    end
end
