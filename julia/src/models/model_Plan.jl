# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Plan

    Plan(;
        id=nothing,
        model_id=nothing,
        simulator=nothing,
        query=nothing,
        content=nothing,
        concept=nothing,
    )

    - id::Int64
    - model_id::Int64
    - simulator::String
    - query::String
    - content::String
    - concept::Concept
"""
Base.@kwdef mutable struct Plan <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    model_id::Union{Nothing, Int64} = nothing
    simulator::Union{Nothing, String} = nothing
    query::Union{Nothing, String} = nothing
    content::Union{Nothing, String} = nothing
    concept = nothing # spec type: Union{ Nothing, Concept }

    function Plan(id, model_id, simulator, query, content, concept, )
        OpenAPI.validate_property(Plan, Symbol("id"), id)
        OpenAPI.validate_property(Plan, Symbol("model_id"), model_id)
        OpenAPI.validate_property(Plan, Symbol("simulator"), simulator)
        OpenAPI.validate_property(Plan, Symbol("query"), query)
        OpenAPI.validate_property(Plan, Symbol("content"), content)
        OpenAPI.validate_property(Plan, Symbol("concept"), concept)
        return new(id, model_id, simulator, query, content, concept, )
    end
end # type Plan

const _property_types_Plan = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("model_id")=>"Int64", Symbol("simulator")=>"String", Symbol("query")=>"String", Symbol("content")=>"String", Symbol("concept")=>"Concept", )
OpenAPI.property_type(::Type{ Plan }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Plan[name]))}

function check_required(o::Plan)
    o.simulator === nothing && (return false)
    o.query === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Plan }, name::Symbol, val)
    if name === Symbol("content")
        OpenAPI.validate_param(name, "Plan", :format, val, "json-string")
    end
end
