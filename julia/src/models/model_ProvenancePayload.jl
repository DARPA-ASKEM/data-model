# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProvenancePayload

    ProvenancePayload(;
        root_id=1,
        root_type=nothing,
        user_id=nothing,
        curie=nothing,
        edges=false,
        nodes=true,
        types=nothing,
        hops=15,
        limit=1000,
        verbose=false,
    )

    - root_id::Int64
    - root_type::ProvenanceType
    - user_id::Int64
    - curie::String
    - edges::Bool
    - nodes::Bool
    - types::Vector{ProvenanceType}
    - hops::Int64
    - limit::Int64
    - verbose::Bool
"""
Base.@kwdef mutable struct ProvenancePayload <: OpenAPI.APIModel
    root_id::Union{Nothing, Int64} = 1
    root_type = nothing # spec type: Union{ Nothing, ProvenanceType }
    user_id::Union{Nothing, Int64} = nothing
    curie::Union{Nothing, String} = nothing
    edges::Union{Nothing, Bool} = false
    nodes::Union{Nothing, Bool} = true
    types::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProvenanceType} }
    hops::Union{Nothing, Int64} = 15
    limit::Union{Nothing, Int64} = 1000
    verbose::Union{Nothing, Bool} = false

    function ProvenancePayload(root_id, root_type, user_id, curie, edges, nodes, types, hops, limit, verbose, )
        OpenAPI.validate_property(ProvenancePayload, Symbol("root_id"), root_id)
        OpenAPI.validate_property(ProvenancePayload, Symbol("root_type"), root_type)
        OpenAPI.validate_property(ProvenancePayload, Symbol("user_id"), user_id)
        OpenAPI.validate_property(ProvenancePayload, Symbol("curie"), curie)
        OpenAPI.validate_property(ProvenancePayload, Symbol("edges"), edges)
        OpenAPI.validate_property(ProvenancePayload, Symbol("nodes"), nodes)
        OpenAPI.validate_property(ProvenancePayload, Symbol("types"), types)
        OpenAPI.validate_property(ProvenancePayload, Symbol("hops"), hops)
        OpenAPI.validate_property(ProvenancePayload, Symbol("limit"), limit)
        OpenAPI.validate_property(ProvenancePayload, Symbol("verbose"), verbose)
        return new(root_id, root_type, user_id, curie, edges, nodes, types, hops, limit, verbose, )
    end
end # type ProvenancePayload

const _property_types_ProvenancePayload = Dict{Symbol,String}(Symbol("root_id")=>"Int64", Symbol("root_type")=>"ProvenanceType", Symbol("user_id")=>"Int64", Symbol("curie")=>"String", Symbol("edges")=>"Bool", Symbol("nodes")=>"Bool", Symbol("types")=>"Vector{ProvenanceType}", Symbol("hops")=>"Int64", Symbol("limit")=>"Int64", Symbol("verbose")=>"Bool", )
OpenAPI.property_type(::Type{ ProvenancePayload }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProvenancePayload[name]))}

function check_required(o::ProvenancePayload)
    true
end

function OpenAPI.validate_property(::Type{ ProvenancePayload }, name::Symbol, val)
end
