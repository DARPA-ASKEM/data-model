# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Qualifier

    Qualifier(;
        id=nothing,
        dataset_id=nothing,
        description=nothing,
        name=nothing,
        value_type=nothing,
    )

    - id::Int64
    - dataset_id::Int64
    - description::String
    - name::String
    - value_type::ValueType
"""
Base.@kwdef mutable struct Qualifier <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    dataset_id::Union{Nothing, Int64} = nothing
    description::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    value_type = nothing # spec type: Union{ Nothing, ValueType }

    function Qualifier(id, dataset_id, description, name, value_type, )
        OpenAPI.validate_property(Qualifier, Symbol("id"), id)
        OpenAPI.validate_property(Qualifier, Symbol("dataset_id"), dataset_id)
        OpenAPI.validate_property(Qualifier, Symbol("description"), description)
        OpenAPI.validate_property(Qualifier, Symbol("name"), name)
        OpenAPI.validate_property(Qualifier, Symbol("value_type"), value_type)
        return new(id, dataset_id, description, name, value_type, )
    end
end # type Qualifier

const _property_types_Qualifier = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("dataset_id")=>"Int64", Symbol("description")=>"String", Symbol("name")=>"String", Symbol("value_type")=>"ValueType", )
OpenAPI.property_type(::Type{ Qualifier }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Qualifier[name]))}

function check_required(o::Qualifier)
    o.name === nothing && (return false)
    o.value_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Qualifier }, name::Symbol, val)
end
