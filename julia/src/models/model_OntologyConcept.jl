# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OntologyConcept

    OntologyConcept(;
        id=nothing,
        curie=nothing,
        type=nothing,
        object_id=nothing,
        status=nothing,
    )

    - id::Int64
    - curie::String
    - type::TaggableType
    - object_id::Int64
    - status::OntologicalField
"""
Base.@kwdef mutable struct OntologyConcept <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    curie::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, TaggableType }
    object_id::Union{Nothing, Int64} = nothing
    status = nothing # spec type: Union{ Nothing, OntologicalField }

    function OntologyConcept(id, curie, type, object_id, status, )
        OpenAPI.validate_property(OntologyConcept, Symbol("id"), id)
        OpenAPI.validate_property(OntologyConcept, Symbol("curie"), curie)
        OpenAPI.validate_property(OntologyConcept, Symbol("type"), type)
        OpenAPI.validate_property(OntologyConcept, Symbol("object_id"), object_id)
        OpenAPI.validate_property(OntologyConcept, Symbol("status"), status)
        return new(id, curie, type, object_id, status, )
    end
end # type OntologyConcept

const _property_types_OntologyConcept = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("curie")=>"String", Symbol("type")=>"TaggableType", Symbol("object_id")=>"Int64", Symbol("status")=>"OntologicalField", )
OpenAPI.property_type(::Type{ OntologyConcept }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OntologyConcept[name]))}

function check_required(o::OntologyConcept)
    o.curie === nothing && (return false)
    o.type === nothing && (return false)
    o.status === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OntologyConcept }, name::Symbol, val)
end
