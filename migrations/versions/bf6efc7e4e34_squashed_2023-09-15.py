"""squash2

Revision ID: bf6efc7e4e34
Revises:
Create Date: 2023-09-15 15:41:35.379063

"""
import sqlalchemy as sa

# pylint: disable=no-member, invalid-name
from alembic import op

# Elasticsearch operators such as es.create_index, es.remove_index, es.update_index_schema, es.bulk_load_index_from_jsonl, etc
from migrations import es

# revision identifiers, used by Alembic.
revision = "bf6efc7e4e34"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "active_concept",
        sa.Column("curie", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("curie"),
    )
    op.create_table(
        "feature",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dataset_id", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("display_name", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "value_type",
            sa.Enum("binary", "bool", "float", "int", "str", name="valuetype"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "model_framework",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("semantics", sa.String(), nullable=False),
        sa.Column("schema_url", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("name"),
    )
    op.create_table(
        "person",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("org", sa.String(), nullable=True),
        sa.Column("website", sa.String(), nullable=True),
        sa.Column("is_registered", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "project",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "timestamp", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "publication",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("xdd_uri", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("publication_data", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "qualifier",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dataset_id", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "value_type",
            sa.Enum("binary", "bool", "float", "int", "str", name="valuetype"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "software",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "timestamp", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("source", sa.String(), nullable=False),
        sa.Column("storage_uri", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "association",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("person_id", sa.Integer(), nullable=False),
        sa.Column("resource_id", sa.Integer(), nullable=False),
        sa.Column(
            "resource_type",
            sa.Enum(
                "datasets",
                "models",
                "model_configurations",
                "publications",
                "simulations",
                "workflows",
                "artifacts",
                "code",
                name="resourcetype",
            ),
            nullable=True,
        ),
        sa.Column(
            "role",
            sa.Enum("author", "contributor", "maintainer", "other", name="role"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "extraction",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("publication_id", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("equation", "figure", "table", name="extractedtype"),
            nullable=False,
        ),
        sa.Column("data", sa.LargeBinary(), nullable=False),
        sa.Column("img", sa.LargeBinary(), nullable=False),
        sa.ForeignKeyConstraint(
            ["publication_id"],
            ["publication.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "model_runtime",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "timestamp", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("left", sa.String(), nullable=False),
        sa.Column("right", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["left"],
            ["model_framework.name"],
        ),
        sa.ForeignKeyConstraint(
            ["right"],
            ["model_framework.name"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ontology_concept",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("curie", sa.String(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "datasets",
                "models",
                "projects",
                "publications",
                "qualifiers",
                "simulation_parameters",
                "model_configurations",
                "simulations",
                "workflows",
                "artifacts",
                "code",
                name="taggabletype",
            ),
            nullable=False,
        ),
        sa.Column("object_id", sa.String(), nullable=False),
        sa.Column(
            "status", sa.Enum("obj", "unit", name="ontologicalfield"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["curie"],
            ["active_concept.curie"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "project_asset",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("resource_id", sa.String(), nullable=False),
        sa.Column(
            "resource_type",
            sa.Enum(
                "datasets",
                "models",
                "model_configurations",
                "publications",
                "simulations",
                "workflows",
                "artifacts",
                "code",
                name="resourcetype",
            ),
            nullable=False,
        ),
        sa.Column("external_ref", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "provenance",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "timestamp", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "relation_type",
            sa.Enum(
                "BEGINS_AT",
                "CITES",
                "COMBINED_FROM",
                "CONTAINS",
                "COPIED_FROM",
                "DECOMPOSED_FROM",
                "DERIVED_FROM",
                "EDITED_FROM",
                "EQUIVALENT_OF",
                "EXTRACTED_FROM",
                "GENERATED_BY",
                "GLUED_FROM",
                "IS_CONCEPT_OF",
                "PARAMETER_OF",
                "REINTERPRETS",
                "STRATIFIED_FROM",
                "USES",
                name="relationtype",
            ),
            nullable=False,
        ),
        sa.Column("left", sa.String(), nullable=False),
        sa.Column(
            "left_type",
            sa.Enum(
                "Concept",
                "Dataset",
                "Model",
                "ModelConfiguration",
                "Project",
                "Publication",
                "Simulation",
                "Artifact",
                "Code",
                name="provenancetype",
            ),
            nullable=False,
        ),
        sa.Column("right", sa.String(), nullable=False),
        sa.Column(
            "right_type",
            sa.Enum(
                "Concept",
                "Dataset",
                "Model",
                "ModelConfiguration",
                "Project",
                "Publication",
                "Simulation",
                "Artifact",
                "Code",
                name="provenancetype",
            ),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("concept", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "qualifier_xref",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("qualifier_id", sa.Integer(), nullable=False),
        sa.Column("feature_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["feature_id"],
            ["feature.id"],
        ),
        sa.ForeignKeyConstraint(
            ["qualifier_id"],
            ["qualifier.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###

    for index_name, index_dict in es_indexes.items():
        es.create_index(index_name=es.normalize_index(index_name), schema=index_dict)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("qualifier_xref")
    op.drop_table("provenance")
    op.drop_table("project_asset")
    op.drop_table("ontology_concept")
    op.drop_table("model_runtime")
    op.drop_table("extraction")
    op.drop_table("association")
    op.drop_table("software")
    op.drop_table("qualifier")
    op.drop_table("publication")
    op.drop_table("project")
    op.drop_table("person")
    op.drop_table("model_framework")
    op.drop_table("feature")
    op.drop_table("active_concept")
    # ### end Alembic commands ###

    for index_name in es_indexes.keys():
        es.remove_index(index_name=es.normalize_index(index_name))


es_indexes = {
    "model": {
        "properties": {
            "model": {"type": "object", "enabled": False},
            "semantics": {"type": "object", "enabled": False},
            "metadata": {"type": "object", "enabled": False},
            "timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"},
        }
    },
    "dataset": {
        "properties": {"timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"}}
    },
    "model_configuration": {
        "properties": {
            "model_id": {"type": "keyword"},
            "timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"},
            "configuration.model": {"type": "object", "enabled": False},
            "configuration.semantics": {"type": "object", "enabled": False},
            "configuration.metadata": {"type": "object", "enabled": False},
            "amr_configuration": {"type": "object", "enabled": False},
        }
    },
    "simulation": {
        "dynamic": False,
        "properties": {"timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"}},
    },
    "workflow": {
        "dynamic": False,
        "properties": {
            "document": {"type": "object", "enabled": False},
            "timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"},
        },
    },
    "artifact": {
        "properties": {"timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"}}
    },
    "notebook_session": {
        "dynamic": False,
        "properties": {"timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"}},
    },
    "code": {
        "dynamic": False,
        "properties": {"timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"}},
    },
    "document": {
        "dynamic": False,
        "properties": {"timestamp": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"}},
    },
}
