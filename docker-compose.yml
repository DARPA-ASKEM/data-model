version: "3.9"
networks:
  data-api:
    driver: bridge
    name: data-api
  data-annotation-stack:
    driver: bridge
    name: data-annotation-stack
services:
  rdb:
    container_name: data-service-rdb
    image: "postgres:15.1"
    ports:
      - "8032:5432"
    environment:
      - POSTGRES_PASSWORD=dev
      - POSTGRES_USER=dev
      - POSTGRES_DB=askem
    volumes:
      - ./data:/docker-entrypoint-initdb.d
    networks:
      - data-api
  api:
    container_name: data-service-api
    build:
      context: ./
      dockerfile: docker/Dockerfile
    ports:
      - "8001:8000"
    env_file:
      - api.env
    environment:
      - NEO4J_ENABLED
    networks:
      - data-annotation-stack
      - data-api
    depends_on:
      - rdb
      - graphdb
      - minio
    volumes:
      - $PWD/tds:/api/tds
      - $PWD/data/datasets:/datasets
  graphdb:
    build:
      context: ./
      dockerfile: docker/Dockerfile.neo4j
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_pagecache_size=512M
    depends_on:
      - rdb
    networks:
      - data-api
  minio:
    build:
      context: ./
      dockerfile: docker/Dockerfile.minio
    environment:
      MINIO_ROOT_USER: miniouser
      MINIO_ROOT_PASSWORD: miniopass
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - $PWD/data:/data
    networks:
      - data-api
      - data-annotation-stack
  elasticsearch_setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - elasticsearch_certs:/usr/share/elasticsearch/config/certs
    user: "0"
    env_file:
      - api.env
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: tds_elasticsearch_01\n"\
          "    dns:\n"\
          "      - tds_elasticsearch_01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://tds_elasticsearch_01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://tds_elasticsearch_01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/tds_elasticsearch_01/tds_elasticsearch_01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
  elasticsearch:
    depends_on:
      elasticsearch_setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    env_file:
      - api.env
    volumes:
      - elasticsearch_certs:/usr/share/elasticsearch/config/certs
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=tds_elasticsearch_01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=tds_elasticsearch_01
#      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/tds_elasticsearch_01/tds_elasticsearch_01.key
      - xpack.security.http.ssl.certificate=certs/tds_elasticsearch_01/tds_elasticsearch_01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/tds_elasticsearch_01/tds_elasticsearch_01.key
      - xpack.security.transport.ssl.certificate=certs/tds_elasticsearch_01/tds_elasticsearch_01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - elasticsearch_certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
volumes:
  elasticsearch_certs:
    driver: local
  elasticsearch_data:
    driver: local
  kibanadata:
    driver: local